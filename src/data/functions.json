{
	"l": { "name": "l", "description": "Loads device LogicType to register by housing index value.", "example": "l r? d? logicType" },
	"s": { "name": "s", "description": "Stores register value to LogicType on device by housing index value.", "example": "s d? logicType r?" },
	"ls": { "name": "ls", "description": "Loads slot LogicSlotType on device to register.", "example": "ls r? d? slotIndex logicSlotType" },
	"lr": {
		"name": "lr",
		"description": "Loads reagent of device's ReagentMode where a hash of the reagent type to check for. ReagentMode can be either Contents (0), Required (1), Recipe (2). Can use either the word, or the number.",
		"example": "lr r? d? reagentMode int"
	},
	"sb": { "name": "sb", "description": "Stores register value to LogicType on all output network devices with provided type hash.", "example": "sb deviceHash logicType r?" },
	"lb": {
		"name": "lb",
		"description": "Loads LogicType from all output network devices with provided type hash using the provide batch mode. Average (0), Sum (1), Minimum (2), Maximum (3). Can use either the word, or the number.",
		"example": "lb r? deviceHash logicType batchMode"
	},
	"alias": {
		"name": "alias",
		"description": "Labels register or device reference with name, device references also affect what shows on the screws on the IC base.",
		"example": "alias str r?|d?"
	},
	"move": { "name": "move", "description": "Register = provided num or register value.", "example": "move r? a(r?|num)" },
	"add": { "name": "add", "description": "Register = a + b.", "example": "add r? a(r?|num) b(r?|num)" },
	"sub": { "name": "sub", "description": "Register = a - b.", "example": "sub r? a(r?|num) b(r?|num)" },
	"sdse": { "name": "sdse", "description": "Register = 1 if device is set, otherwise 0.", "example": "sdse r? d?" },
	"sdns": { "name": "sdns", "description": "Register = 1 if device is not set, otherwise 0", "example": "sdns r? d?" },
	"slt": { "name": "slt", "description": "Register = 1 if a < b, otherwise 0", "example": "slt r? a(r?|num) b(r?|num)" },
	"sgt": { "name": "sgt", "description": "Register = 1 if a > b, otherwise 0", "example": "sgt r? a(r?|num) b(r?|num)" },
	"sle": { "name": "sle", "description": "Register = 1 if a <= b, otherwise 0", "example": "sle r? a(r?|num) b(r?|num)" },
	"sge": { "name": "sge", "description": "Register = 1 if a >= b, otherwise 0", "example": "sge r? a(r?|num) b(r?|num)" },
	"seq": { "name": "seq", "description": "Register = 1 if a == b, otherwise 0", "example": "seq r? a(r?|num) b(r?|num)" },
	"sne": { "name": "sne", "description": "Register = 1 if a != b, otherwise 0", "example": "sne r? a(r?|num) b(r?|num)" },
	"sap": {
		"name": "sap",
		"description": "Register = 1 if abs(a - b) <= max(c \\* max(abs(a), abs(b)), float.epsilon \\* 8), otherwise 0",
		"example": "sap r? a(r?|num) b(r?|num) c(r?|num)"
	},
	"sna": {
		"name": "sna",
		"description": "Register = 1 if abs(a - b) > max(c \\* max(abs(a), abs(b)), float.epsilon \\* 8), otherwise 0",
		"example": "sna r? a(r?|num) b(r?|num) c(r?|num)"
	},
	"and": {
		"name": "and",
		"description": "Performs a bitwise logical AND operation on the binary representation of two values. Each bit of the result is determined by evaluating the corresponding bits of the input values. If both bits are 1, the resulting bit is set to 1. Otherwise the resulting bit is set to 0.",
		"example": "and r? a(r?|num) b(r?|num)"
	},
	"or": {
		"name": "or",
		"description": "Performs a bitwise logical OR operation on the binary representation of two values. Each bit of the result is determined by evaluating the corresponding bits of the input values. If either bit is 1, the resulting bit is set to 1. If both bits are 0, the resulting bit is set to 0.",
		"example": "or r? a(r?|num) b(r?|num)"
	},
	"xor": {
		"name": "xor",
		"description": "Performs a bitwise logical XOR (exclusive OR) operation on the binary representation of two values. Each bit of the result is determined by evaluating the corresponding bits of the input values. If the bits are different (one bit is 0 and the other is 1), the resulting bit is set to 1. If the bits are the same (both 0 or both 1), the resulting bit is set to 0.",
		"example": "xor r? a(r?|num) b(r?|num)"
	},
	"nor": {
		"name": "nor",
		"description": "Performs a bitwise logical NOR (NOT OR) operation on the binary representation of two values. Each bit of the result is determined by evaluating the corresponding bits of the input values. If both bits are 0, the resulting bit is set to 1. Otherwise, if at least one bit is 1, the resulting bit is set to 0.",
		"example": "nor r? a(r?|num) b(r?|num)"
	},
	"mul": { "name": "mul", "description": "Register = a \\* b", "example": "mul r? a(r?|num) b(r?|num)" },
	"div": { "name": "div", "description": "Register = a / b", "example": "div r? a(r?|num) b(r?|num)" },
	"mod": { "name": "mod", "description": "Register = a mod b (note: NOT a % b)", "example": "mod r? a(r?|num) b(r?|num)" },
	"j": { "name": "j", "description": "Jump execution to line a", "example": "j int" },
	"bltz": { "name": "bltz", "description": "Branch to line b if a < 0", "example": "bltz a(r?|num) b(r?|num)" },
	"bgez": { "name": "bgez", "description": "Branch to line b if a >= 0", "example": "bgez a(r?|num) b(r?|num)" },
	"blez": { "name": "blez", "description": "Branch to line b if a <= 0", "example": "blez a(r?|num) b(r?|num)" },
	"bgtz": { "name": "bgtz", "description": "Branch to line b if a > 0", "example": "bgtz a(r?|num) b(r?|num)" },
	"bdse": { "name": "bdse", "description": "Branch to line a if device d is set", "example": "bdse d? a(r?|num)" },
	"bdns": { "name": "bdns", "description": "Branch to line a if device d isn't set", "example": "bdns d? a(r?|num)" },
	"beq": { "name": "beq", "description": "Branch to line c if a == b", "example": "beq a(r?|num) b(r?|num) c(r?|num)" },
	"bne": { "name": "bne", "description": "Branch to line c if a != b", "example": "bne a(r?|num) b(r?|num) c(r?|num)" },
	"bap": {
		"name": "bap",
		"description": "Branch to line d if abs(a - b) <= max(c \\* max(abs(a), abs(b)), float.epsilon \\* 8)",
		"example": "bap a(r?|num) b(r?|num) c(r?|num) d(r?|num)"
	},
	"bna": {
		"name": "bna",
		"description": "Branch to line d if abs(a - b) > max(c \\* max(abs(a), abs(b)), float.epsilon \\* 8)",
		"example": "bna a(r?|num) b(r?|num) c(r?|num) d(r?|num)"
	},
	"jal": { "name": "jal", "description": "Jump execution to line a and store next line number in ra", "example": "jal int" },
	"brdse": { "name": "brdse", "description": "Relative jump to line a if device is set", "example": "brdse d? a(r?|num)" },
	"brdns": { "name": "brdns", "description": "Relative jump to line a if device is not set", "example": "brdns d? a(r?|num)" },
	"bltzal": { "name": "bltzal", "description": "Branch to line b if a < 0 and store next line number in ra", "example": "bltzal a(r?|num) b(r?|num)" },
	"bgezal": { "name": "bgezal", "description": "Branch to line b if a >= 0 and store next line number in ra", "example": "bgezal a(r?|num) b(r?|num)" },
	"blezal": { "name": "blezal", "description": "Branch to line b if a <= 0 and store next line number in ra", "example": "blezal a(r?|num) b(r?|num)" },
	"bgtzal": { "name": "bgtzal", "description": "Branch to line b if a > 0 and store next line number in ra", "example": "bgtzal a(r?|num) b(r?|num)" },
	"beqal": { "name": "beqal", "description": "Branch to line c if a == b and store next line number in ra", "example": "beqal a(r?|num) b(r?|num) c(r?|num)" },
	"bneal": { "name": "bneal", "description": "Branch to line c if a != b and store next line number in ra", "example": "bneal a(r?|num) b(r?|num) c(r?|num)" },
	"jr": { "name": "jr", "description": "Relative jump to line a", "example": "jr int" },
	"bdseal": { "name": "bdseal", "description": "Jump execution to line a and store next line number if device is set", "example": "bdseal d? a(r?|num)" },
	"bdnsal": { "name": "bdnsal", "description": "Jump execution to line a and store next line number if device is not set", "example": "bdnsal d? a(r?|num)" },
	"brltz": { "name": "brltz", "description": "Relative branch to line b if a < 0", "example": "brltz a(r?|num) b(r?|num)" },
	"brgez": { "name": "brgez", "description": "Relative branch to line b if a >= 0", "example": "brgez a(r?|num) b(r?|num)" },
	"brlez": { "name": "brlez", "description": "Relative branch to line b if a <= 0", "example": "brlez a(r?|num) b(r?|num)" },
	"brgtz": { "name": "brgtz", "description": "Relative branch to line b if a > 0", "example": "brgtz a(r?|num) b(r?|num)" },
	"breq": { "name": "breq", "description": "Relative branch to line c if a == b", "example": "breq a(r?|num) b(r?|num) c(r?|num)" },
	"brne": { "name": "brne", "description": "Relative branch to line c if a != b", "example": "brne a(r?|num) b(r?|num) c(r?|num)" },
	"brap": {
		"name": "brap",
		"description": "Relative branch to line d if abs(a - b) <= max(c \\* max(abs(a), abs(b)), float.epsilon \\* 8)",
		"example": "brap a(r?|num) b(r?|num) c(r?|num) d(r?|num)"
	},
	"brna": {
		"name": "brna",
		"description": "Relative branch to line d if abs(a - b) > max(c \\* max(abs(a), abs(b)), float.epsilon \\* 8)",
		"example": "brna a(r?|num) b(r?|num) c(r?|num) d(r?|num)"
	},
	"sqrt": { "name": "sqrt", "description": "Register = square root of a", "example": "sqrt r? a(r?|num)" },
	"round": { "name": "round", "description": "Register = a rounded to nearest integer", "example": "round r? a(r?|num)" },
	"trunc": { "name": "trunc", "description": "Register = a with fractional part removed", "example": "trunc r? a(r?|num)" },
	"ceil": { "name": "ceil", "description": "Register = smallest integer greater than a", "example": "ceil r? a(r?|num)" },
	"floor": { "name": "floor", "description": "Register = largest integer less than a", "example": "floor r? a(r?|num)" },
	"max": { "name": "max", "description": "Register = max of a or b", "example": "max r? a(r?|num) b(r?|num)" },
	"min": { "name": "min", "description": "Register = min of a or b", "example": "min r? a(r?|num) b(r?|num)" },
	"abs": { "name": "abs", "description": "Register = the absolute value of a", "example": "abs r? a(r?|num)" },
	"log": { "name": "log", "description": "Register = log(a)", "example": "log r? a(r?|num)" },
	"exp": { "name": "exp", "description": "Register = exp(a)", "example": "exp r? a(r?|num)" },
	"rand": { "name": "rand", "description": "Register = a random value x with 0 <= x < 1", "example": "rand r?" },
	"yield": { "name": "yield", "description": "Pauses execution for 1 tick", "example": "yield" },
	"label": { "name": "label", "description": "DEPRECATED", "example": "label d? str" },
	"peek": { "name": "peek", "description": "Register = the value at the top of the stack", "example": "peek r?" },
	"push": { "name": "push", "description": "Pushes the value of a to the stack at sp and increments sp", "example": "push a(r?|num)" },
	"pop": { "name": "pop", "description": "Register = the value at the top of the stack and decrements sp", "example": "pop r?" },
	"hcf": { "name": "hcf", "description": "Halt and catch fire", "example": "hcf" },
	"select": { "name": "select", "description": "Register = b if a is non-zero, otherwise c", "example": "select r? a(r?|num) b(r?|num) c(r?|num)" },
	"blt": { "name": "blt", "description": "Branch to line c if a < b", "example": "blt a(r?|num) b(r?|num) c(r?|num)" },
	"bgt": { "name": "bgt", "description": "Branch to line c if a > b", "example": "bgt a(r?|num) b(r?|num) c(r?|num)" },
	"ble": { "name": "ble", "description": "Branch to line c if a <= b", "example": "ble a(r?|num) b(r?|num) c(r?|num)" },
	"bge": { "name": "bge", "description": "Branch to line c if a >= b", "example": "bge a(r?|num) b(r?|num) c(r?|num)" },
	"brlt": { "name": "brlt", "description": "Relative jump to line c if a < b", "example": "brlt a(r?|num) b(r?|num) c(r?|num)" },
	"brgt": { "name": "brgt", "description": "relative jump to line c if a > b", "example": "brgt a(r?|num) b(r?|num) c(r?|num)" },
	"brle": { "name": "brle", "description": "Relative jump to line c if a <= b", "example": "brle a(r?|num) b(r?|num) c(r?|num)" },
	"brge": { "name": "brge", "description": "Relative jump to line c if a >= b", "example": "brge a(r?|num) b(r?|num) c(r?|num)" },
	"bltal": { "name": "bltal", "description": "Branch to line c if a < b and store next line number in ra", "example": "bltal a(r?|num) b(r?|num) c(r?|num)" },
	"bgtal": { "name": "bgtal", "description": "Branch to line c if a > b and store next line number in ra", "example": "bgtal a(r?|num) b(r?|num) c(r?|num)" },
	"bleal": { "name": "bleal", "description": "Branch to line c if a <= b and store next line number in ra", "example": "bleal a(r?|num) b(r?|num) c(r?|num)" },
	"bgeal": { "name": "bgeal", "description": "Branch to line c if a >= b and store next line number in ra", "example": "bgeal a(r?|num) b(r?|num) c(r?|num)" },
	"bapal": { "name": "bapal", "description": "Branch to line c if a != b and store next line number in ra", "example": "bapal a(r?|num) b(r?|num) c(r?|num) d(r?|num)" },
	"bnaal": {
		"name": "bnaal",
		"description": "Branch to line d if abs(a - b) <= max(c \\* max(abs(a), abs(b)), float.epsilon \\* 8) and store next line number in ra",
		"example": "bnaal a(r?|num) b(r?|num) c(r?|num) d(r?|num)"
	},
	"beqz": { "name": "beqz", "description": "Branch to line b if a == 0", "example": "beqz a(r?|num) b(r?|num)" },
	"bnez": { "name": "bnez", "description": "branch to line b if a != 0", "example": "bnez a(r?|num) b(r?|num)" },
	"bapz": { "name": "bapz", "description": "Branch to line c if abs(a) <= float.epsilon \\* 8", "example": "bapz a(r?|num) b(r?|num) c(r?|num)" },
	"bnaz": { "name": "bnaz", "description": "Branch to line c if abs(a) > float.epsilon \\* 8", "example": "bnaz a(r?|num) b(r?|num) c(r?|num)" },
	"breqz": { "name": "breqz", "description": "Relative branch to line b if a == 0", "example": "breqz a(r?|num) b(r?|num)" },
	"brnez": { "name": "brnez", "description": "Relative branch to line b if a != 0", "example": "brnez a(r?|num) b(r?|num)" },
	"brapz": { "name": "brapz", "description": "Relative branch to line c if abs(a) <= float.epsilon \\* 8", "example": "brapz a(r?|num) b(r?|num) c(r?|num)" },
	"brnaz": { "name": "brnaz", "description": "Relative branch to line c if abs(a) > float.epsilon \\* 8", "example": "brnaz a(r?|num) b(r?|num) c(r?|num)" },
	"beqzal": { "name": "beqzal", "description": "Branch to line b if a == 0 and store next line number in ra", "example": "beqzal a(r?|num) b(r?|num)" },
	"bnezal": { "name": "bnezal", "description": "Branch to line b if a != 0 and store next line number in ra", "example": "bnezal a(r?|num) b(r?|num)" },
	"bapzal": { "name": "bapzal", "description": "Branch to line c if abs(a) <= float.epsilon \\* 8", "example": "bapzal a(r?|num) b(r?|num) c(r?|num)" },
	"bnazal": { "name": "bnazal", "description": "Branch to line c if abs(a) > float.epsilon \\* 8", "example": "bnazal a(r?|num) b(r?|num) c(r?|num)" },
	"sltz": { "name": "sltz", "description": "Register = 1 if a < 0, otherwise 0", "example": "sltz r? a(r?|num)" },
	"sgtz": { "name": "sgtz", "description": "Register = 1 if a > 0, otherwise 0", "example": "sgtz r? a(r?|num)" },
	"slez": { "name": "slez", "description": "Register = 1 if a <= 0, otherwise 0", "example": "slez r? a(r?|num)" },
	"sgez": { "name": "sgez", "description": "Register = 1 if a >= 0, otherwise 0", "example": "sgez r? a(r?|num)" },
	"seqz": { "name": "seqz", "description": "Register = 1 if a == 0, otherwise 0", "example": "seqz r? a(r?|num)" },
	"snez": { "name": "snez", "description": "Register = 1 if a != 0, otherwise 0", "example": "snez r? a(r?|num)" },
	"sapz": { "name": "sapz", "description": "Register = 1 if |a| <= float.epsilon \\* 8, otherwise 0", "example": "sapz r? a(r?|num) b(r?|num)" },
	"snaz": { "name": "snaz", "description": "Register = 1 if |a| > float.epsilon, otherwise 0", "example": "snaz r? a(r?|num) b(r?|num)" },
	"define": { "name": "define", "description": "Creates a label that will be replaced throughout the program with the provided value.", "example": "define str num" },
	"sleep": { "name": "sleep", "description": "Pauses execution on the IC for a seconds", "example": "sleep a(r?|num)" },
	"sin": { "name": "sin", "description": "Returns the sine of the specified angle (radians)", "example": "sin r? a(r?|num)" },
	"asin": { "name": "asin", "description": "Returns the angle (radians) whos sine is the specified value", "example": "asin r? a(r?|num)" },
	"tan": { "name": "tan", "description": "Returns the tan of the specified angle (radians)", "example": "tan r? a(r?|num)" },
	"atan": { "name": "atan", "description": "Returns the angle (radians) whos tan is the specified value", "example": "atan r? a(r?|num)" },
	"cos": { "name": "cos", "description": "Returns the cosine of the specified angle (radians)", "example": "cos r? a(r?|num)" },
	"acos": { "name": "acos", "description": "Returns the cosine of the specified angle (radians)", "example": "acos r? a(r?|num)" },
	"atan2": {
		"name": "atan2",
		"description": "Returns the angle (radians) whose tangent is the quotient of two specified values: a (y) and b (x)",
		"example": "atan2 r? a(r?|num) b(r?|num)"
	},
	"brnan": { "name": "brnan", "description": "Relative branch to line b if a is not a number (NaN)", "example": "brnan a(r?|num) b(r?|num)" },
	"bnan": { "name": "bnan", "description": "Branch to line b if a is not a number (NaN)", "example": "bnan a(r?|num) b(r?|num)" },
	"snan": { "name": "snan", "description": "Register = 1 if a is NaN, otherwise 0", "example": "snan r? a(r?|num)" },
	"snanz": { "name": "snanz", "description": "Register = 0 if a is NaN, otherwise 1", "example": "snanz r? a(r?|num)" },
	"lbs": {
		"name": "lbs",
		"description": "Loads LogicSlotType from slotIndex from all output network devices with provided type hash using the provide batch mode. Average (0), Sum (1), Minimum (2), Maximum (3). Can use either the word, or the number.",
		"example": "lbs r? deviceHash slotIndex logicSlotType batchMode"
	},
	"lbn": {
		"name": "lbn",
		"description": "Loads LogicType from all output network devices with provided type and name hashes using the provide batch mode. Average (0), Sum (1), Minimum (2), Maximum (3). Can use either the word, or the number.",
		"example": "lbn r? deviceHash nameHash logicType batchMode"
	},
	"sbn": {
		"name": "sbn",
		"description": "Stores register value to LogicType on all output network devices with provided type hash and name.",
		"example": "sbn deviceHash nameHash logicType r?"
	},
	"lbns": {
		"name": "lbns",
		"description": "Loads LogicSlotType from slotIndex from all output network devices with provided type and name hashes using the provide batch mode. Average (0), Sum (1), Minimum (2), Maximum (3). Can use either the word, or the number.",
		"example": "lbns r? deviceHash nameHash slotIndex logicSlotType batchMode"
	},
	"ss": { "name": "ss", "description": "Stores register value to device stored in a slot LogicSlotType on device.", "example": "ss d? slotIndex logicSlotType r?" },
	"sbs": {
		"name": "sbs",
		"description": "Stores register value to LogicSlotType on all output network devices with provided type hash in the provided slot.",
		"example": "sbs deviceHash slotIndex logicSlotType r?"
	},
	"srl": {
		"name": "srl",
		"description": "Performs a bitwise logical right shift operation on the binary representation of a value. It shifts the bits to the right and fills the vacated leftmost bits with zeros",
		"example": "srl r? a(r?|num) b(r?|num)"
	},
	"sra": {
		"name": "sra",
		"description": "Performs a bitwise arithmetic right shift operation on the binary representation of a value. It shifts the bits to the right and fills the vacated leftmost bits with a copy of the sign bit (the most significant bit).",
		"example": "sra r? a(r?|num) b(r?|num)"
	},
	"sll": {
		"name": "sll",
		"description": "Performs a bitwise logical left shift operation on the binary representation of a value. It shifts the bits to the left and fills the vacated rightmost bits with zeros.",
		"example": "sll r? a(r?|num) b(r?|num)"
	},
	"sla": {
		"name": "sla",
		"description": "Performs a bitwise arithmetic left shift operation on the binary representation of a value. It shifts the bits to the left and fills the vacated rightmost bits with a copy of the sign bit (the most significant bit).",
		"example": "sla r? a(r?|num) b(r?|num)"
	},
	"not": {
		"name": "not",
		"description": "Performs a bitwise logical NOT operation flipping each bit of the input value, resulting in a binary complement. If a bit is 1, it becomes 0, and if a bit is 0, it becomes 1.",
		"example": "not r? a(r?|num)"
	},
	"ld": { "name": "ld", "description": "Loads device LogicType to register by direct ID reference.", "example": "ld r? id(r?|num) logicType" },
	"sd": { "name": "sd", "description": "Stores register value to LogicType on device by direct ID reference.", "example": "sd id(r?|num) logicType r?" },
	"poke": { "name": "poke", "description": "Stores the provided value at the provided address in the stack.", "example": "poke address(r?|num) value(r?|num)" },
	"getd": {
		"name": "getd",
		"description": "Seeks directly for the provided device id, attempts to read the stack value at the provided address, and places it in the register.",
		"example": "getd r? id(r?|num) address(r?|num)"
	},
	"putd": {
		"name": "putd",
		"description": "Seeks directly for the provided device id, attempts to write the provided value to the stack at the provided address.",
		"example": "putd id(r?|num) address(r?|num) value(r?|num)"
	},
	"get": {
		"name": "get",
		"description": "Using the provided device, attempts to read the stack value at the provided address, and places it in the register.",
		"example": "get r? d? address(r?|num)"
	},
	"put": {
		"name": "put",
		"description": "Using the provided device, attempts to write the provided value to the stack at the provided address.",
		"example": "put d? address(r?|num) value(r?|num)"
	},
	"clr": { "name": "clr", "description": "Clears the stack memory for the provided device.", "example": "clr d?" },
	"clrd": { "name": "clrd", "description": "Seeks directly for the provided device id and clears the stack memory of that device", "example": "clrd id(r?|num)" }
}
