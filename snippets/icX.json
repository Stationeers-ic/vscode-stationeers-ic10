{
  "alias":               {
    "prefix":      "alias",
    "body":        [
      "alias"
    ],
    "description": "Set an alias for the register or data channel"
  },
  "aliasD0":             {
    "prefix":      "aliasd0",
    "body":        [
      "alias $1 d0"
    ],
    "description": "alias {name} d0"
  },
  "aliasD1":             {
    "prefix":      "aliasd1",
    "body":        [
      "alias $1 d1"
    ],
    "description": "alias {name} d1"
  },
  "aliasD2":             {
    "prefix":      "aliasd2",
    "body":        [
      "alias $1 d2"
    ],
    "description": "alias {name} d2"
  },
  "aliasD3":             {
    "prefix":      "aliasd3",
    "body":        [
      "alias $1 d3"
    ],
    "description": "alias {name} d3"
  },
  "aliasD4":             {
    "prefix":      "aliasd4",
    "body":        [
      "alias $1 d4"
    ],
    "description": "alias {name} d4"
  },
  "aliasD5":             {
    "prefix":      "aliasd5",
    "body":        [
      "alias $1 d5"
    ],
    "description": "alias {name} d5"
  },
  "loop":                {
    "prefix":      "j l",
    "body":        [
      "loop:",
      "$1",
      "j loop"
    ],
    "description": "main loop"
  },
  "abs":                 {
    "prefix":      "abs",
    "body":        [
      "abs"
    ],
    "description": "The absolute value of the number"
  },
  "acos":                {
    "prefix":      "acos",
    "body":        [
      "acos"
    ],
    "description": "Arccosine *"
  },
  "add":                 {
    "prefix":      "add",
    "body":        [
      "add"
    ],
    "description": "Amount"
  },
  "and":                 {
    "prefix":      "and",
    "body":        [
      "and"
    ],
    "description": "Logical AND, one if both op2 and op3 are true, zero otherwise"
  },
  "asin":                {
    "prefix":      "asin",
    "body":        [
      "asin"
    ],
    "description": "Arcsine *"
  },
  "atan":                {
    "prefix":      "atan",
    "body":        [
      "atan"
    ],
    "description": "Arctangent *"
  },
  "bap":                 {
    "prefix":      "bap",
    "body":        [
      "bap"
    ],
    "description": "R / N / C"
  },
  "bapal":               {
    "prefix":      "bapal",
    "body":        [
      "bapal"
    ],
    "description": "R / N / C"
  },
  "bapz":                {
    "prefix":      "bapz",
    "body":        [
      "bapz"
    ],
    "description": "R / N / C"
  },
  "bapzal":              {
    "prefix":      "bapzal",
    "body":        [
      "bapzal"
    ],
    "description": "R / N / C"
  },
  "bdns":                {
    "prefix":      "bdns",
    "body":        [
      "bdns"
    ],
    "description": "D / N"
  },
  "bdnsal":              {
    "prefix":      "bdnsal",
    "body":        [
      "bdnsal"
    ],
    "description": "D / N"
  },
  "bdse":                {
    "prefix":      "bdse",
    "body":        [
      "bdse"
    ],
    "description": "D / N"
  },
  "bdseal":              {
    "prefix":      "bdseal",
    "body":        [
      "bdseal"
    ],
    "description": "D / N"
  },
  "beq":                 {
    "prefix":      "beq",
    "body":        [
      "beq"
    ],
    "description": "R / N / C"
  },
  "beqal":               {
    "prefix":      "beqal",
    "body":        [
      "beqal"
    ],
    "description": "R / N / C"
  },
  "beqz":                {
    "prefix":      "beqz",
    "body":        [
      "beqz"
    ],
    "description": "R / N / C"
  },
  "beqzal":              {
    "prefix":      "beqzal",
    "body":        [
      "beqzal"
    ],
    "description": "R / N / C"
  },
  "bge":                 {
    "prefix":      "bge",
    "body":        [
      "bge"
    ],
    "description": "R / N / C"
  },
  "bgeal":               {
    "prefix":      "bgeal",
    "body":        [
      "bgeal"
    ],
    "description": "R / N / C"
  },
  "bgez":                {
    "prefix":      "bgez",
    "body":        [
      "bgez"
    ],
    "description": "R / N / C"
  },
  "bgezal":              {
    "prefix":      "bgezal",
    "body":        [
      "bgezal"
    ],
    "description": "R / N / C"
  },
  "bgt":                 {
    "prefix":      "bgt",
    "body":        [
      "bgt"
    ],
    "description": "R / N / C"
  },
  "bgtal":               {
    "prefix":      "bgtal",
    "body":        [
      "bgtal"
    ],
    "description": "R / N / C"
  },
  "bgtz":                {
    "prefix":      "bgtz",
    "body":        [
      "bgtz"
    ],
    "description": "R / N / C"
  },
  "bgtzal":              {
    "prefix":      "bgtzal",
    "body":        [
      "bgtzal"
    ],
    "description": "R / N / C"
  },
  "ble":                 {
    "prefix":      "ble",
    "body":        [
      "ble"
    ],
    "description": "R / N / C"
  },
  "bleal":               {
    "prefix":      "bleal",
    "body":        [
      "bleal"
    ],
    "description": "R / N / C"
  },
  "blez":                {
    "prefix":      "blez",
    "body":        [
      "blez"
    ],
    "description": "R / N / C"
  },
  "blezal":              {
    "prefix":      "blezal",
    "body":        [
      "blezal"
    ],
    "description": "R / N / C"
  },
  "blt":                 {
    "prefix":      "blt",
    "body":        [
      "blt"
    ],
    "description": "R / N / C"
  },
  "bltal":               {
    "prefix":      "bltal",
    "body":        [
      "bltal"
    ],
    "description": "R / N / C"
  },
  "bltz":                {
    "prefix":      "bltz",
    "body":        [
      "bltz"
    ],
    "description": "R / N / C"
  },
  "bltzal":              {
    "prefix":      "bltzal",
    "body":        [
      "bltzal"
    ],
    "description": "R / N / C"
  },
  "bna":                 {
    "prefix":      "bna",
    "body":        [
      "bna"
    ],
    "description": "R / N / C"
  },
  "bnaal":               {
    "prefix":      "bnaal",
    "body":        [
      "bnaal"
    ],
    "description": "R / N / C"
  },
  "bnaz":                {
    "prefix":      "bnaz",
    "body":        [
      "bnaz"
    ],
    "description": "R / N / C"
  },
  "bnazal":              {
    "prefix":      "bnazal",
    "body":        [
      "bnazal"
    ],
    "description": "R / N / C"
  },
  "bne":                 {
    "prefix":      "bne",
    "body":        [
      "bne"
    ],
    "description": "R / N / C"
  },
  "bneal":               {
    "prefix":      "bneal",
    "body":        [
      "bneal"
    ],
    "description": "R / N / C"
  },
  "bnez":                {
    "prefix":      "bnez",
    "body":        [
      "bnez"
    ],
    "description": "R / N / C"
  },
  "bnezal":              {
    "prefix":      "bnezal",
    "body":        [
      "bnezal"
    ],
    "description": "R / N / C"
  },
  "brap":                {
    "prefix":      "brap",
    "body":        [
      "brap"
    ],
    "description": "R / N / C"
  },
  "brapz":               {
    "prefix":      "brapz",
    "body":        [
      "brapz"
    ],
    "description": "R / N / C"
  },
  "brdns":               {
    "prefix":      "brdns",
    "body":        [
      "brdns"
    ],
    "description": "D / N"
  },
  "brdse":               {
    "prefix":      "brdse",
    "body":        [
      "brdse"
    ],
    "description": "D / N"
  },
  "breq":                {
    "prefix":      "breq",
    "body":        [
      "breq"
    ],
    "description": "R / N / C"
  },
  "breqz":               {
    "prefix":      "breqz",
    "body":        [
      "breqz"
    ],
    "description": "R / N / C"
  },
  "brge":                {
    "prefix":      "brge",
    "body":        [
      "brge"
    ],
    "description": "R / N / C"
  },
  "brgez":               {
    "prefix":      "brgez",
    "body":        [
      "brgez"
    ],
    "description": "R / N / C"
  },
  "brgt":                {
    "prefix":      "brgt",
    "body":        [
      "brgt"
    ],
    "description": "R / N / C"
  },
  "brgtz":               {
    "prefix":      "brgtz",
    "body":        [
      "brgtz"
    ],
    "description": "R / N / C"
  },
  "brle":                {
    "prefix":      "brle",
    "body":        [
      "brle"
    ],
    "description": "R / N / C"
  },
  "brlez":               {
    "prefix":      "brlez",
    "body":        [
      "brlez"
    ],
    "description": "R / N / C"
  },
  "brlt":                {
    "prefix":      "brlt",
    "body":        [
      "brlt"
    ],
    "description": "R / N / C"
  },
  "brltz":               {
    "prefix":      "brltz",
    "body":        [
      "brltz"
    ],
    "description": "R / N / C"
  },
  "brna":                {
    "prefix":      "brna",
    "body":        [
      "brna"
    ],
    "description": "R / N / C"
  },
  "brnaz":               {
    "prefix":      "brnaz",
    "body":        [
      "brnaz"
    ],
    "description": "R / N / C"
  },
  "brne":                {
    "prefix":      "brne",
    "body":        [
      "brne"
    ],
    "description": "R / N / C"
  },
  "brnez":               {
    "prefix":      "brnez",
    "body":        [
      "brnez"
    ],
    "description": "R / N / C"
  },
  "ceil":                {
    "prefix":      "ceil",
    "body":        [
      "ceil"
    ],
    "description": "Round up to nearest integer"
  },
  "cos":                 {
    "prefix":      "cos",
    "body":        [
      "cos"
    ],
    "description": "Cosine*"
  },
  "define":              {
    "prefix":      "define",
    "body":        [
      "define"
    ],
    "description": "Set a name for the constant"
  },
  "div":                 {
    "prefix":      "div",
    "body":        [
      "div"
    ],
    "description": "Division"
  },
  "exp":                 {
    "prefix":      "exp",
    "body":        [
      "exp"
    ],
    "description": "Exhibitor"
  },
  "floor":               {
    "prefix":      "floor",
    "body":        [
      "floor"
    ],
    "description": "Round down to nearest integer"
  },
  "hcf":                 {
    "prefix":      "hcf",
    "body":        [
      "hcf"
    ],
    "description": ""
  },
  "j":                   {
    "prefix":      "j",
    "body":        [
      "j"
    ],
    "description": "R / N / A / T"
  },
  "jal":                 {
    "prefix":      "jal",
    "body":        [
      "jal"
    ],
    "description": "R / N / A / T"
  },
  "jr":                  {
    "prefix":      "jr",
    "body":        [
      "jr"
    ],
    "description": "R / N / O"
  },
  "l":                   {
    "prefix":      "l",
    "body":        [
      "l"
    ],
    "description": "Reading the value of the op3 parameter from the op2 port"
  },
  "log":                 {
    "prefix":      "log",
    "body":        [
      "log"
    ],
    "description": "Natural logarithm"
  },
  "lr":                  {
    "prefix":      "lr",
    "body":        [
      "lr"
    ],
    "description": "Reading op4 reagent value in op3 mode from op2 port"
  },
  "ls":                  {
    "prefix":      "ls",
    "body":        [
      "ls"
    ],
    "description": "Reading the op4 value from the op3 slot of the op2 port"
  },
  "max":                 {
    "prefix":      "max",
    "body":        [
      "max"
    ],
    "description": "Maximum of two"
  },
  "min":                 {
    "prefix":      "min",
    "body":        [
      "min"
    ],
    "description": "The minimum of two"
  },
  "mod":                 {
    "prefix":      "mod",
    "body":        [
      "mod"
    ],
    "description": "Remainder of integer division of op2 by op3 (the result is not equivalent to the% operator, and will be positive for any signs of op2 and op3)"
  },
  "move":                {
    "prefix":      "move",
    "body":        [
      "move"
    ],
    "description": "Assigning a value"
  },
  "mul":                 {
    "prefix":      "mul",
    "body":        [
      "mul"
    ],
    "description": "Composition"
  },
  "nor":                 {
    "prefix":      "nor",
    "body":        [
      "nor"
    ],
    "description": "Inverse OR, one if both op2 and op3 are false, zero otherwise"
  },
  "or":                  {
    "prefix":      "or",
    "body":        [
      "or"
    ],
    "description": "Logical OR, zero if both op2 and op3 are false, one otherwise"
  },
  "peek":                {
    "prefix":      "peek",
    "body":        [
      "peek"
    ],
    "description": "Write the top value from the stack to op1 without moving the stack"
  },
  "pop":                 {
    "prefix":      "pop",
    "body":        [
      "pop"
    ],
    "description": "Pop the value off the stack and write to op1"
  },
  "push":                {
    "prefix":      "push",
    "body":        [
      "push"
    ],
    "description": "Put op1 on the stack"
  },
  "rand":                {
    "prefix":      "rand",
    "body":        [
      "rand"
    ],
    "description": "Random variable from 0 to 1 inclusive"
  },
  "round":               {
    "prefix":      "round",
    "body":        [
      "round"
    ],
    "description": "Round to the nearest integer"
  },
  "s":                   {
    "prefix":      "s",
    "body":        [
      "s"
    ],
    "description": "Writing a value to the op2 parameter of the op1 port"
  },
  "sap":                 {
    "prefix":      "sap",
    "body":        [
      "sap"
    ],
    "description": "If op2 op3 with precision op4, then one, otherwise zero"
  },
  "sapz":                {
    "prefix":      "sapz",
    "body":        [
      "sapz"
    ],
    "description": "If op2 0 with precision op3, then one, otherwise zero"
  },
  "sdns":                {
    "prefix":      "sdns",
    "body":        [
      "sdns"
    ],
    "description": "If channel op2 is not set to then one, otherwise zero"
  },
  "sdse":                {
    "prefix":      "sdse",
    "body":        [
      "sdse"
    ],
    "description": "If channel op2 is set to one, otherwise zero"
  },
  "select":              {
    "prefix":      "select",
    "body":        [
      "select"
    ],
    "description": "Ternary select. If op2 is true, then op1: = op3, otherwise op1: = op4"
  },
  "seq":                 {
    "prefix":      "seq",
    "body":        [
      "seq"
    ],
    "description": "If op2 = op3, then one, otherwise zero"
  },
  "seqz":                {
    "prefix":      "seqz",
    "body":        [
      "seqz"
    ],
    "description": "If op2 = 0, then one, otherwise zero"
  },
  "sge":                 {
    "prefix":      "sge",
    "body":        [
      "sge"
    ],
    "description": "If op2 op3, then one, otherwise zero"
  },
  "sgez":                {
    "prefix":      "sgez",
    "body":        [
      "sgez"
    ],
    "description": "If op2 0, then one, otherwise zero"
  },
  "sgt":                 {
    "prefix":      "sgt",
    "body":        [
      "sgt"
    ],
    "description": "If op2> op3, then one, otherwise zero"
  },
  "sgtz":                {
    "prefix":      "sgtz",
    "body":        [
      "sgtz"
    ],
    "description": "If op2> 0, then one, otherwise zero"
  },
  "sin":                 {
    "prefix":      "sin",
    "body":        [
      "sin"
    ],
    "description": "Sinus*"
  },
  "sle":                 {
    "prefix":      "sle",
    "body":        [
      "sle"
    ],
    "description": "If op2 op3, then one, otherwise zero"
  },
  "sleep":               {
    "prefix":      "sleep",
    "body":        [
      "sleep"
    ],
    "description": "R / N / C"
  },
  "slez":                {
    "prefix":      "slez",
    "body":        [
      "slez"
    ],
    "description": "If op2 0, then one, otherwise zero"
  },
  "slt":                 {
    "prefix":      "slt",
    "body":        [
      "slt"
    ],
    "description": "If op2 <op3, then one, otherwise zero"
  },
  "sltz":                {
    "prefix":      "sltz",
    "body":        [
      "sltz"
    ],
    "description": "If op2 <0, then one, otherwise zero"
  },
  "sna":                 {
    "prefix":      "sna",
    "body":        [
      "sna"
    ],
    "description": "If op2 op3 with precision op4, then one, otherwise zero"
  },
  "snaz":                {
    "prefix":      "snaz",
    "body":        [
      "snaz"
    ],
    "description": "If op2 0 with precision op3, then one, otherwise zero"
  },
  "sne":                 {
    "prefix":      "sne",
    "body":        [
      "sne"
    ],
    "description": "If op2 op3, then one, otherwise zero"
  },
  "snez":                {
    "prefix":      "snez",
    "body":        [
      "snez"
    ],
    "description": "If op2 0, then one, otherwise zero"
  },
  "sqrt":                {
    "prefix":      "sqrt",
    "body":        [
      "sqrt"
    ],
    "description": "Square root"
  },
  "sub":                 {
    "prefix":      "sub",
    "body":        [
      "sub"
    ],
    "description": "Difference"
  },
  "tan":                 {
    "prefix":      "tan",
    "body":        [
      "tan"
    ],
    "description": "Tangent*"
  },
  "trunc":               {
    "prefix":      "trunc",
    "body":        [
      "trunc"
    ],
    "description": "The integer part of number"
  },
  "xor":                 {
    "prefix":      "xor",
    "body":        [
      "xor"
    ],
    "description": "Exclusive OR, one if one and only one of op2 and op3 is true, zero otherwise"
  },
  "yield":               {
    "prefix":      "yield",
    "body":        [
      "yield"
    ],
    "description": ""
  },
  "Activate":            {
    "prefix":      "Activate",
    "body":        [
      "Activate"
    ],
    "description": "-1 - stop, 0 - not working 1 - working"
  },
  "Charge":              {
    "prefix":      "Charge",
    "body":        [
      "Charge"
    ],
    "description": "Battery charge in the slot, J."
  },
  "Class":               {
    "prefix":      "Class",
    "body":        [
      "Class"
    ],
    "description": "0 - everything that does not belong to other classes; <br> 1 - helmets; <br> 2 - suits and armor; <br> 3 - jetpacks and backpacks; <br> 4 - gas filters; <br> 5 - gas cylinders; <br> 6 - motherboards; <br> 7 - printed circuit boards; <br> 8 - data disc; <br> 9 - organs (brain, lungs); <br> 10 - ores; <br> 11 - plants; <br> 12 - uniforms; <br> 13 - creatures (including characters); <br> 14 - batteries; <br> 14 - eggs; <br> 15 - belts; <br> 16 - tools ; <br> 17 - desktop equipment (microwave oven, paint mixer, etc.); <br> 18 - ingots; <br> 19 - torpedoes; <br> 20 - cartridges; <br> 21 - access cards, < br> 22 - shops for arms; <br> 23 - logic chips; <br> 24 - bottles (milk, soybean oil); <br> 25 - microprocessors; <br> 26 - glasses."
  },
  "ClearMemory":         {
    "prefix":      "ClearMemory",
    "body":        [
      "ClearMemory"
    ],
    "description": "> = 1 - resets counters"
  },
  "Color":               {
    "prefix":      "Color",
    "body":        [
      "Color"
    ],
    "description": "Color of LED lamp, fixed beacon and LED display"
  },
  "Combustion":          {
    "prefix":      "Combustion",
    "body":        [
      "Combustion"
    ],
    "description": "1 - ignition detected, 0 - in all other cases"
  },
  "CompletionRatio":     {
    "prefix":      "CompletionRatio",
    "body":        [
      "CompletionRatio"
    ],
    "description": "production stage in%"
  },
  "Damage":              {
    "prefix":      "Damage",
    "body":        [
      "Damage"
    ],
    "description": "The damage level of the object in the slot. 0 - whole object, 1 - completely destroyed."
  },
  "ElevatorLevel":       {
    "prefix":      "ElevatorLevel",
    "body":        [
      "ElevatorLevel"
    ],
    "description": "For reading - the level at which the elevator car is located, or -1 if there is no car. On record - sends the elevator to the specified floor."
  },
  "ElevatorSpeed":       {
    "prefix":      "ElevatorSpeed",
    "body":        [
      "ElevatorSpeed"
    ],
    "description": "Elevator car speed, m / tick. A negative value corresponds to a downward movement, 0 to a stationary booth, and a positive value to an upward movement."
  },
  "Error":               {
    "prefix":      "Error",
    "body":        [
      "Error"
    ],
    "description": "0 - normal operation, 1 - error"
  },
  "ExportCount":         {
    "prefix":      "ExportCount",
    "body":        [
      "ExportCount"
    ],
    "description": "counter of objects passed through the export slot"
  },
  "Filtration":          {
    "prefix":      "Filtration",
    "body":        [
      "Filtration"
    ],
    "description": "Switches the filtration of the spent mixture in a rugged spacesuit."
  },
  "ForceWrite":          {
    "prefix":      "ForceWrite",
    "body":        [
      "ForceWrite"
    ],
    "description": "Forces write and multi-write chips to transmit the current value to the hardware."
  },
  "Harvest":             {
    "prefix":      "Harvest",
    "body":        [
      "Harvest"
    ],
    "description": "Activates harvesting in an automatic hydroponic station."
  },
  "Horizontal":          {
    "prefix":      "Horizontal",
    "body":        [
      "Horizontal"
    ],
    "description": "angle with respect to the Sun in degrees in the horizontal projection of the Sun on the plane of the sensor"
  },
  "Idle":                {
    "prefix":      "Idle",
    "body":        [
      "Idle"
    ],
    "description": "Loading the arc furnace. 0 - ore not loaded, 1 - loaded."
  },
  "ImportCount":         {
    "prefix":      "ImportCount",
    "body":        [
      "ImportCount"
    ],
    "description": "counter of objects passed through the import slot"
  },
  "Lock":                {
    "prefix":      "Lock",
    "body":        [
      "Lock"
    ],
    "description": "0 - manual control unlocked, 1 - locked"
  },
  "Maximum":             {
    "prefix":      "Maximum",
    "body":        [
      "Maximum"
    ],
    "description": "The maximum value of any equipment parameter, such as battery charge or pressure at the inlet to the combustion chamber of a jet engine. Very often present, but not used."
  },
  "MaxQuantity":         {
    "prefix":      "MaxQuantity",
    "body":        [
      "MaxQuantity"
    ],
    "description": "maximum number of items in a slot"
  },
  "Mode":                {
    "prefix":      "Mode",
    "body":        [
      "Mode"
    ],
    "description": "operating mode"
  },
  "On":                  {
    "prefix":      "On",
    "body":        [
      "On"
    ],
    "description": "0 - disabled 1 - disabled"
  },
  "Open":                {
    "prefix":      "Open",
    "body":        [
      "Open"
    ],
    "description": "0 - ejection closed, 1 - open"
  },
  "Output":              {
    "prefix":      "Output",
    "body":        [
      "Output"
    ],
    "description": "For the sorter - r / w, Int - the next output to which the object will be sent. <br> For the stacker - w, Trigger - unloads the accumulated packing of objects into the export slot."
  },
  "Plant":               {
    "prefix":      "Plant",
    "body":        [
      "Plant"
    ],
    "description": "Starts the process of planting a plant from the import slot in an automatic hydroponic station."
  },
  "PositionX":           {
    "prefix":      "PositionX",
    "body":        [
      "PositionX"
    ],
    "description": "the X coordinate of the current position"
  },
  "PositionY":           {
    "prefix":      "PositionY",
    "body":        [
      "PositionY"
    ],
    "description": "the y-coordinate of the current position"
  },
  "PositionZ":           {
    "prefix":      "PositionZ",
    "body":        [
      "PositionZ"
    ],
    "description": "the Z coordinate of the current position"
  },
  "Power":               {
    "prefix":      "Power",
    "body":        [
      "Power"
    ],
    "description": "0 - no power or off, 1 - power on"
  },
  "PowerActual":         {
    "prefix":      "PowerActual",
    "body":        [
      "PowerActual"
    ],
    "description": "Total electricity consumption by all devices in the network, W."
  },
  "PowerGeneration":     {
    "prefix":      "PowerGeneration",
    "body":        [
      "PowerGeneration"
    ],
    "description": "Generator's current electricity production, W."
  },
  "PowerPotential":      {
    "prefix":      "PowerPotential",
    "body":        [
      "PowerPotential"
    ],
    "description": "Maximum available power of the network, W."
  },
  "PowerRequired":       {
    "prefix":      "PowerRequired",
    "body":        [
      "PowerRequired"
    ],
    "description": "The total demand for electricity of all devices in the network, W."
  },
  "PressureExternal":    {
    "prefix":      "PressureExternal",
    "body":        [
      "PressureExternal"
    ],
    "description": "atmospheric pressure in the environment, kPa"
  },
  "PressureInternal":    {
    "prefix":      "PressureInternal",
    "body":        [
      "PressureInternal"
    ],
    "description": "Pressure in the pipeline at which the active ventilation stops, kPa. Installed but not used."
  },
  "Ratio":               {
    "prefix":      "Ratio",
    "body":        [
      "Ratio"
    ],
    "description": "For batteries - Charge / Maximum ratio. <br> For other devices - Setting / Maximum ratio."
  },
  "RatioCarbonDioxide":  {
    "prefix":      "RatioCarbonDioxide",
    "body":        [
      "RatioCarbonDioxide"
    ],
    "description": "fraction of carbon dioxide"
  },
  "RatioNitrogen":       {
    "prefix":      "RatioNitrogen",
    "body":        [
      "RatioNitrogen"
    ],
    "description": "proportion of nitrogen"
  },
  "RatioNitrousOxide":   {
    "prefix":      "RatioNitrousOxide",
    "body":        [
      "RatioNitrousOxide"
    ],
    "description": "proportion of nitrous oxide"
  },
  "RatioOxygen":         {
    "prefix":      "RatioOxygen",
    "body":        [
      "RatioOxygen"
    ],
    "description": "oxygen fraction"
  },
  "RatioPollutant":      {
    "prefix":      "RatioPollutant",
    "body":        [
      "RatioPollutant"
    ],
    "description": "proportion of toxins"
  },
  "RatioVolatiles":      {
    "prefix":      "RatioVolatiles",
    "body":        [
      "RatioVolatiles"
    ],
    "description": "fraction of volatile gases"
  },
  "RatioWater":          {
    "prefix":      "RatioWater",
    "body":        [
      "RatioWater"
    ],
    "description": "fraction of water vapor"
  },
  "Reagents":            {
    "prefix":      "Reagents",
    "body":        [
      "Reagents"
    ],
    "description": "total weight of ingredients in grams"
  },
  "RecipeHash":          {
    "prefix":      "RecipeHash",
    "body":        [
      "RecipeHash"
    ],
    "description": "hash of the selected recipe"
  },
  "RequiredPower":       {
    "prefix":      "RequiredPower",
    "body":        [
      "RequiredPower"
    ],
    "description": "Energy required to operate the device, W."
  },
  "Setting":             {
    "prefix":      "Setting",
    "body":        [
      "Setting"
    ],
    "description": "The current value of some parameter of the equipment. The type and possible values ​​depend on the equipment."
  },
  "SolarAngle":          {
    "prefix":      "SolarAngle",
    "body":        [
      "SolarAngle"
    ],
    "description": "angle to the sun in degrees"
  },
  "TargetX":             {
    "prefix":      "TargetX",
    "body":        [
      "TargetX"
    ],
    "description": "target X coordinate"
  },
  "TargetY":             {
    "prefix":      "TargetY",
    "body":        [
      "TargetY"
    ],
    "description": "target Y coordinate"
  },
  "TargetZ":             {
    "prefix":      "TargetZ",
    "body":        [
      "TargetZ"
    ],
    "description": "target Z coordinate"
  },
  "TemperatureExternal": {
    "prefix":      "TemperatureExternal",
    "body":        [
      "TemperatureExternal"
    ],
    "description": "temperature of the outer atmosphere, K"
  },
  "TemperatureSetting":  {
    "prefix":      "TemperatureSetting",
    "body":        [
      "TemperatureSetting"
    ],
    "description": "The set temperature inside a durable spacesuit, K."
  },
  "TotalMoles":          {
    "prefix":      "TotalMoles",
    "body":        [
      "TotalMoles"
    ],
    "description": "The total amount of gas inside the pipeline, mol."
  },
  "VelocityMagnitude":   {
    "prefix":      "VelocityMagnitude",
    "body":        [
      "VelocityMagnitude"
    ],
    "description": "bot movement speed module"
  },
  "VelocityRelativeX":   {
    "prefix":      "VelocityRelativeX",
    "body":        [
      "VelocityRelativeX"
    ],
    "description": "speed of movement along the X coordinate"
  },
  "VelocityRelativeY":   {
    "prefix":      "VelocityRelativeY",
    "body":        [
      "VelocityRelativeY"
    ],
    "description": "speed of movement along the Y coordinate"
  },
  "VelocityRelativeZ":   {
    "prefix":      "VelocityRelativeZ",
    "body":        [
      "VelocityRelativeZ"
    ],
    "description": "speed of movement along the Z coordinate"
  },
  "Vertical":            {
    "prefix":      "Vertical",
    "body":        [
      "Vertical"
    ],
    "description": "angle to the sun in degrees"
  },
  "Volume":              {
    "prefix":      "Volume",
    "body":        [
      "Volume"
    ],
    "description": "Volume"
  },
  "ChargeRatio":         {
    "prefix":      "ChargeRatio",
    "body":        [
      "ChargeRatio"
    ],
    "description": "Battery charge level in the slot."
  },
  "Efficiency":          {
    "prefix":      "Efficiency",
    "body":        [
      "Efficiency"
    ],
    "description": "Plant growth efficiency in an automatic hydroponic station. -1 if there is no plant."
  },
  "Growth":              {
    "prefix":      "Growth",
    "body":        [
      "Growth"
    ],
    "description": "Plant growth stage in an automatic hydroponic station. -1 if there is no plant."
  },
  "Health":              {
    "prefix":      "Health",
    "body":        [
      "Health"
    ],
    "description": "Plant health in an automatic hydroponic station. 0 - dead plant, 1 - completely healthy, -1 - no plant."
  },
  "Mature":              {
    "prefix":      "Mature",
    "body":        [
      "Mature"
    ],
    "description": "The readiness of the plant in the automatic hydroponic station for harvesting. -1 if there is no plant."
  },
  "OccupantHash":        {
    "prefix":      "OccupantHash",
    "body":        [
      "OccupantHash"
    ],
    "description": "hash of the object in the slot"
  },
  "Occupied":            {
    "prefix":      "Occupied",
    "body":        [
      "Occupied"
    ],
    "description": "0 - slot free, 1 - busy"
  },
  "PressureAir":         {
    "prefix":      "PressureAir",
    "body":        [
      "PressureAir"
    ],
    "description": "Pressure in the breathing gas cylinder of a spacesuit installed in a rack, kPa."
  },
  "PressureWaste":       {
    "prefix":      "PressureWaste",
    "body":        [
      "PressureWaste"
    ],
    "description": "Pressure in the tank with the spent mixture of the spacesuit installed in the rack, kPa."
  },
  "PrefabHash":          {
    "prefix":      "PrefabHash",
    "body":        [
      "PrefabHash"
    ],
    "description": "hash of the Prefab object"
  },
  "Pressure":            {
    "prefix":      "Pressure",
    "body":        [
      "Pressure"
    ],
    "description": "pressure, kPa"
  },
  "Quantity":            {
    "prefix":      "Quantity",
    "body":        [
      "Quantity"
    ],
    "description": "weight / number of items"
  },
  "Temperature":         {
    "prefix":      "Temperature",
    "body":        [
      "Temperature"
    ],
    "description": "temperature, K"
  },
  "lb":                  {
    "prefix":      "lb",
    "body":        [
      "lb"
    ],
    "description": "Batch read to op1 from all devices with op2 hash of op3 in op4 mode"
  },
  "sb":                  {
    "prefix":      "sb",
    "body":        [
      "sb"
    ],
    "description": "Batch write to all devices with hash op1 to op2 of op3"
  },
  "if":                  {
    "prefix":      "if",
    "body":        [
      "if $1",
      "\t$2",
      "end"
    ],
    "description": "if"
  },
  "function":            {
    "prefix":      "function",
    "body":        [
      "function $1",
      "\t$2",
      "end"
    ],
    "description": "if"
  },
  "while":               {
    "prefix":      "while",
    "body":        [
      "while $1",
      "\t$2",
      "end"
    ],
    "description": "if"
  },
  "break":               {
    "prefix":      "break",
    "body":        [
      "break",
      "$1"
    ],
    "description": "break"
  },
  "var":                 {
    "prefix":      "var",
    "body":        [
      "var $1 $2"
    ],
    "description": "var"
  },
  "const":               {
    "prefix":      "const",
    "body":        [
      "const $1 $2"
    ],
    "description": "const"
  },
  "switch":              {
    "prefix":      "switch",
    "body":        [
      "switch $1",
      "\tcase $2",
      "\t\t$3",
      "\tend",
      "end"
    ],
    "description": "switch"
  },
  "foreach":             {
    "prefix":      "foreach",
    "body":        [
      "foreach $1",
      "$2",
      "end"
    ],
    "description": "foreach"
  }
}
